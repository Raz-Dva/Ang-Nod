{"version":3,"sources":["webpack:///./src/app/async-load/async-load.module.ts","webpack:///./src/app/async-load/lazy/lazy.component.html","webpack:///./src/app/async-load/lazy/lazy.component.ts","webpack:///./src/app/my-derective.ts"],"names":[],"mappings":"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","file":"async-load-async-load-module.js","sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule }   from '@angular/forms';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\n\r\nimport { LazyComponent } from './lazy/lazy.component';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { MyDerective } from './../my-derective';\r\n\r\n\r\nconst asyncRoutes:Routes = [\r\n  {path:'', component:LazyComponent}\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    FontAwesomeModule,\r\n    RouterModule.forChild(asyncRoutes)\r\n  ],\r\n  declarations: [LazyComponent, MyDerective]\r\n})\r\nexport class AsyncLoadModule { }\r\n","module.exports = \"<div class=\\\"wrap_component\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n      <div class=\\\"panel widget\\\">\\r\\n        <div class=\\\"panel-heading vd_bg-blue\\\">\\r\\n          <h3 class=\\\"panel-title\\\">\\r\\n            <span class=\\\"menu-icon\\\">\\r\\n              <fa-icon [icon]=\\\"faBars\\\"></fa-icon>\\r\\n            </span>\\r\\n            {{ titleClass }}\\r\\n          </h3>\\r\\n        </div>\\r\\n        <div class=\\\"panel-body-list pd-15\\\" style=\\\"min-height: 234px\\\">\\r\\n          <div class=\\\"input-group mgbt-xs-15\\\">\\r\\n            <div class=\\\"panel widget light-widget\\\">\\r\\n              <div class=\\\"vd_checkbox checkbox-danger\\\">\\r\\n                <input\\r\\n                  id=\\\"checkbox-3\\\"\\r\\n                  type=\\\"checkbox\\\"\\r\\n                  name=\\\"checkClass\\\"\\r\\n                  [(ngModel)]=\\\"wrong\\\"\\r\\n                />\\r\\n                <label for=\\\"checkbox-3\\\"> Remove Alert</label>\\r\\n              </div>\\r\\n              <div\\r\\n                class=\\\"alert alert-success\\\"\\r\\n                [ngClass]=\\\"{ 'alert-display': wrong }\\\"\\r\\n              >\\r\\n                <span class=\\\"vd_alert-icon\\\"\\r\\n                  ><i class=\\\"fa fa-check-circle vd_green\\\"></i\\r\\n                ></span>\\r\\n                <a href=\\\"#\\\" class=\\\"alert-link\\\">This important alert message</a>.\\r\\n                Check the box to remove the alert usage class\\r\\n                <strong>.alert-display &#123; display: none; &#125;</strong>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n      <div class=\\\"panel widget\\\">\\r\\n        <div class=\\\"panel-heading vd_bg-blue\\\">\\r\\n          <h3 class=\\\"panel-title\\\">\\r\\n            <span class=\\\"menu-icon\\\"> <fa-icon [icon]=\\\"faBars\\\"></fa-icon> </span>\\r\\n            {{ tittleIf }}\\r\\n          </h3>\\r\\n        </div>\\r\\n        <div class=\\\"panel-body-list pd-15\\\">\\r\\n          <div *ngIf=\\\"condition; then thenBlock; else elseBlock\\\"></div>\\r\\n          <ng-template #thenBlock>\\r\\n            <div class=\\\"vd_status-widget vd_bg-red widget\\\">\\r\\n              <a href=\\\"#\\\" (click)=\\\"toggle($event)\\\">\\r\\n                <div class=\\\"clearfix\\\">\\r\\n                  <span class=\\\"menu-value\\\"> true </span>\\r\\n                </div>\\r\\n                <div class=\\\"menu-text clearfix\\\">*ngIf</div>\\r\\n              </a>\\r\\n            </div>\\r\\n          </ng-template>\\r\\n          <ng-template #elseBlock>\\r\\n            <div class=\\\"vd_status-widget vd_bg-blue widget\\\">\\r\\n              <a href=\\\"#\\\" (click)=\\\"toggle($event)\\\">\\r\\n                <div class=\\\"clearfix\\\">\\r\\n                  <span class=\\\"menu-value\\\"> false </span>\\r\\n                </div>\\r\\n                <div class=\\\"menu-text clearfix\\\">*ngIf</div>\\r\\n              </a>\\r\\n            </div>\\r\\n          </ng-template>\\r\\n\\r\\n          <button\\r\\n            style=\\\"margin-top: 10px\\\"\\r\\n            class=\\\"btn vd_btn vd_bg-green\\\"\\r\\n            (click)=\\\"toggle($event)\\\"\\r\\n          >\\r\\n            Toggle\\r\\n          </button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n      <div class=\\\"panel widget\\\">\\r\\n        <div class=\\\"panel-heading vd_bg-blue\\\">\\r\\n          <h3 class=\\\"panel-title\\\">\\r\\n            <span class=\\\"menu-icon\\\"> <fa-icon [icon]=\\\"faBars\\\"></fa-icon> </span>\\r\\n            {{ titleStyle }}\\r\\n          </h3>\\r\\n        </div>\\r\\n        <div class=\\\"panel-body-list pd-15\\\">\\r\\n          <h6>Header</h6>\\r\\n          <p [style.color]=\\\"colorElement\\\">\\r\\n            <strong\\r\\n              >Enter color to change this text color. Lorem ipsum dolor sit amet\\r\\n              consectetur, adipisicing elit. For example 'red' or 'grey'</strong\\r\\n            >\\r\\n          </p>\\r\\n          <br />\\r\\n          <input type=\\\"text\\\" name=\\\"color\\\" [(ngModel)]=\\\"colorElement\\\" />\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n      <div class=\\\"panel widget\\\">\\r\\n        <div class=\\\"panel-heading vd_bg-blue\\\">\\r\\n          <h3 class=\\\"panel-title\\\">\\r\\n            <span class=\\\"menu-icon\\\">\\r\\n              <fa-icon [icon]=\\\"faBars\\\"></fa-icon>\\r\\n            </span>\\r\\n            My Derective\\r\\n          </h3>\\r\\n        </div>\\r\\n        <div class=\\\"panel-body-list pd-15\\\">\\r\\n          <div class=\\\"input-group mgbt-xs-15\\\">\\r\\n            <div class=\\\"panel widget light-widget\\\">\\r\\n              <div>\\r\\n                <p appMyDerective color=\\\"grey\\\">\\r\\n                  This is my derective. The style of this paragraph is created\\r\\n                  using \\\"renderer.setStyle (this.elementRef.nativeElement,\\r\\n                  \\\"font-weight\\\", \\\"bold\\\");\\\"\\r\\n                </p>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n@Component({\r\n  selector: 'app-lazy',\r\n  templateUrl: './lazy.component.html'\r\n})\r\nexport class LazyComponent implements OnInit {\r\n  titleClass: string = 'ngClass';\r\n  tittleIf: string = 'ngIf';\r\n  titleStyle: string = 'ngStyle';\r\n  wrong = false;\r\n  condition: boolean = true;\r\n  colorElement: string = 'green';\r\n  faBars = faBars;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  toggle(e: Event) {\r\n    e.preventDefault()\r\n    this.condition = !this.condition;\r\n  };\r\n\r\n}\r\n","import { Directive, Renderer2, ElementRef, HostListener, Input, HostBinding } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appMyDerective]'\r\n})\r\nexport class MyDerective {\r\n  title:string = 'Create your own directives';\r\n  @Input('color') color;\r\n  \r\n  constructor(private elementRef: ElementRef, private renderer: Renderer2) {\r\n    this.renderer.setStyle(this.elementRef.nativeElement, \"font-weight\", \"bold\");\r\n    const buttonElement=this.renderer.createElement('button');\r\n    const text = this.renderer.createText('Text');\r\n      this.renderer.appendChild(buttonElement, text);\r\n      this.renderer.appendChild(this.elementRef.nativeElement, buttonElement);\r\n  }\r\n\r\n  \r\n\r\n  @HostListener('mouseenter') onMouseIn() {\r\n    this.changeColor(this.color);\r\n  }\r\n\r\n  @HostListener('mouseleave') onMouseOut() {\r\n    this.changeColor(null)\r\n  }\r\n\r\n  changeColor(color:string){\r\n    this.elementRef.nativeElement.style.color=color\r\n  }\r\n\r\n  \r\n  @HostBinding(\"style.fontStyle\") get getCursor(){\r\n    return \"italic\";\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}